syntax = "proto3";

package sync;

option go_package = "github.com/thedraketaylor/fsync;fsyncpb";

// Service definition for file upload
service FileUploadService {
  // Upload a file in chunks
  rpc UploadFile (stream FileUploadRequest) returns (FileUploadResponse);
  
  // Get upload status
  rpc GetUploadStatus (UploadStatusRequest) returns (UploadStatusResponse);
}

// Request message for file upload
message FileUploadRequest {
  oneof data {
    // First message should contain metadata
    FileMetadata metadata = 1;
    // Subsequent messages contain chunks of file data
    bytes chunk_data = 2;
  }
  
  // Unique identifier for this upload session
  string upload_id = 3;
}

// Metadata about the file being uploaded
message FileMetadata {
  string filename = 1;
  string mime_type = 2;
  int64 total_size = 3;
  string checksum = 4;
  map<string, string> custom_metadata = 5;
}

// Response after file upload is complete
message FileUploadResponse {
  string file_id = 1;
  string storage_location = 2;
  bool success = 3;
  string error_message = 4;
}

// Request to check upload status
message UploadStatusRequest {
  string upload_id = 1;
}

// Response with current upload status
message UploadStatusResponse {
  enum UploadStatus {
    UNKNOWN = 0;
    IN_PROGRESS = 1;
    COMPLETED = 2;
    FAILED = 3;
  }
  
  UploadStatus status = 1;
  int64 bytes_received = 2;
  float progress_percentage = 3;
  string error_message = 4;
}